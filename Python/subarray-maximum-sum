''' 
<< Coding Mafia on LinkedIn >>
Given an Array A of non negative integers, return the maximum sum of elements
in two of non-overlapping (contiguous) subarrays, witch have lengths L and M.
(For clarification, the L-length subarray could occur before or after the
M-length subarray).

Formaly, return dthe largest V for which V= (A[i]+A[i+1]...A[i+L-1]) + 
(A[j]+A[j+1]...A[j+M-1]) and either:
0<= i < i + L - 1 < j < j + M - 1 < A.length, or
0<= j < j + M - 1 < i < i + L - 1 < A.length, or

Input A=[0,6,5,2,2,5,1,9,4], L=1, M=2
Output: 20

**Understanding the problem
Ordered list: 0,2,2,5,6 - 1,4,5,9
Ordered list: 0,1,2,2,4,5,5,6,9
'''

# Getting a set of digits in Python
number = input("Enter a number with several digits: ")
digits = list(map(int, str(number)))     # Map digits in number to a list
digits.sort()                            # Sort the list ascending
digitsLength = len(digits)               # Get string length

# Getting value for lengths of subarrays
L = int(input("Enter value for L-length: "))
M = int(input("Enter value for M-lenght: "))

sumL = 0
sumM = 0

for i in range (L, 0, -1):
  print("Este es i: " + str(i))
  sumL = sumL + digits[(digitsLength)-i]

for j in range (M, 0, -1):
  sumM = sumM + digits[((digitsLength)-i)-j]

print (sumL + sumM)

# See running: https://colab.research.google.com/drive/1bSSMi8pzMevl_xg34rkRU-_POSQXsADk?usp=sharing
# See interesting discution about list elements interchanges in Python: https://mail.python.org/pipermail/python-es/2006-March/011779.html
